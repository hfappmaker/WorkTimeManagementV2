---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# WorkTimeManagementV2 プロジェクトルール

## 1. 開発環境
- Node.js 18以上を使用
- Yarnをパッケージマネージャーとして使用
- Cursorを推奨エディタとして使用
- DevContainerを使用した開発環境の統一

## 2. コード規約
### 2.1 ファイル構成
- コンポーネントは `components/` ディレクトリに配置
- ページコンポーネントは `app/` ディレクトリに配置
- 型定義は `types/` ディレクトリに配置
- データベース関連のコードは `prisma/` ディレクトリに配置
- ユーティリティ関数は `lib/` ディレクトリに配置

### 2.2 命名規則
- コンポーネントファイル: PascalCase (例: `UserProfile.tsx`)
- ユーティリティファイル: camelCase (例: `formatDate.ts`)
- 型定義: PascalCase (例: `UserType.ts`)
- 定数: UPPER_SNAKE_CASE
- 変数・関数: camelCase

### 2.3 コーディング規約
- TypeScriptの厳格モードを使用
- ESLintとPrettierの設定に従う
- コンポーネントは可能な限り関数コンポーネントを使用
- Props型は明示的に定義する
- 環境変数は `.env` ファイルで管理

## 3. Git運用ルール
### 3.1 ブランチ戦略
- main: 本番環境用ブランチ
- develop: 開発用ブランチ
- feature/*: 機能開発用ブランチ
- hotfix/*: 緊急バグ修正用ブランチ

### 3.2 コミットメッセージ
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響しない変更（空白、フォーマット等）
- refactor: リファクタリング
- test: テストコードの追加・修正
- chore: ビルドプロセスやツールの変更

### 3.3 プルリクエスト
- レビュー必須
- テストの通過を確認
- コンフリクトの解消を確認
- 適切な説明とスクリーンショットの添付

## 4. セキュリティ
- 環境変数は必ず `.env` ファイルで管理
- 機密情報はGitにコミットしない
- 認証情報は適切に暗号化して保存
- セキュリティアップデートは優先的に対応

## 5. パフォーマンス
- 画像の最適化
- コード分割の活用
- 不要なレンダリングの防止
- バンドルサイズの最適化

## 6. テスト
- 重要な機能はテストを書く
- コンポーネントのテストは可能な限り実装
- E2Eテストは重要なユーザーフローに対して実装

## 7. デプロイ
- 本番環境へのデプロイは承認プロセスを経る
- デプロイ前にテストを実行
- ロールバック手順を用意

## 8. ドキュメント
- READMEの更新を忘れない
- API仕様書の更新
- 重要な変更はCHANGELOGに記載
- コメントは必要に応じて追加