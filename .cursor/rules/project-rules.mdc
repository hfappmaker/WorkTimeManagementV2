---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# WorkTimeManagementV2 プロジェクトルール

## 1. 開発環境
- Node.js 18以上を使用
- Yarnをパッケージマネージャーとして使用
- Cursorを推奨エディタとして使用
- DevContainerを使用した開発環境の統一

## 2. コード規約
### 2.1 フォルダ構成
src/
  ├── app              // ルーティングに関するコンポーネント
  ├── assets           // 静的ファイル（画像、フォントなど）
  ├── components       // 汎用的なコンポーネント（ボタン、ラベル、テキストボックス等）
  ├── config           // 全体設定や環境変数のグローバル設定
  ├── features         // 各機能ごとにフォルダを区切って管理するモジュール。必要に応じて以下のサブフォルダ
  │   ┊                  （api, assets, components, hooks, stores, types, utils）を含める:
  │   ├── api          // APIリクエスト宣言および関連フック等
  │   ├── assets       // 機能固有の静的ファイル
  │   ├── components   // 機能固有のコンポーネント
  │   ├── hooks        // 機能固有のカスタムフック
  │   ├── stores       // 機能固有の状態管理
  │   ├── types        // 機能内で使用する型定義
  │   └── utils        // 機能固有のユーティリティ関数
  ├── hooks            // 汎用的なフック
  ├── lib              // アプリケーション固有の再利用可能ライブラリ
  ├── stores           // アプリ全体で共有される状態管理ストア
  ├── testing          // テストユーティリティやモック
  ├── types            // アプリ全体で利用される型定義
  └── utils            // 汎用的なユーティリティ関数

※ 以下の点に注意してください:
- 各機能モジュール内には、必要なフォルダのみを含める
- バレルファイルの使用は、ツリーシェイキングの影響を避けるため、直接インポートすることを推奨
- ESLint ルールを活用し、クロス機能のインポートを制限することで、一方向のコード構造を維持する

この構成は、スケーラビリティ、保守性、そしてチーム間の協働を促進するために設計されています。

### 2.2 命名規則
- ディレクトリ名、ファイル名: kebab-case (例: `user-info/`,`user-profile.tsx`,`user-type.ts`)
- 定数: UPPER_SNAKE_CASE
- 変数・関数: camelCase
  - 短く、直感的で、説明的な名前をつける（S-I-D原則）
  - 単語の収縮は避ける
  - 文脈の順序は変数の意味に影響する
  - 関数名の動詞部分は以下のような対の動詞を使用
    - get/set
    - remove/add
    - delete/create
    - handle（イベントハンドラ）
  - 単数形と複数形は使い分ける
  - プレフィックスは変数の意味を強調する場合のみ使用

### 2.3 コーディング規約
- TypeScriptの厳格モードを使用
- ESLintとPrettierの設定に従う
- コンポーネントは可能な限り関数コンポーネントを使用
- Props型は明示的に定義する
- 原則anyを許容しない
  - ライブラリを使用していて、やむを得ない場合に関してはanyを許容
  - anyを使用する場合はコメントにて補足すること
- asを使った型アサーションは原則使用しないこと
- CSSは原則書かないこと（TailwindCSS側で用意されているクラス名で対応すること）
- 汎用性のあるものはtailwind.configに定義すること
- 改行に<br />は使用しないこと
- 環境変数は `.env` ファイルで管理
- Prismaのランタイムライブラリはimportしない (例: import { Decimal } from "@prisma/client/runtime/library")

## 3. Git運用ルール
### 3.1 ブランチ戦略
- main: 本番環境用ブランチ
- develop: 開発用ブランチ
- feature/*: 機能開発用ブランチ
- hotfix/*: 緊急バグ修正用ブランチ

### 3.2 コミットメッセージ
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響しない変更（空白、フォーマット等）
- refactor: リファクタリング
- test: テストコードの追加・修正
- chore: ビルドプロセスやツールの変更

### 3.3 プルリクエスト
- レビュー必須
- テストの通過を確認
- コンフリクトの解消を確認
- 適切な説明とスクリーンショットの添付

## 4. セキュリティ
- 環境変数は必ず `.env` ファイルで管理
- 機密情報はGitにコミットしない
- 認証情報は適切に暗号化して保存
- セキュリティアップデートは優先的に対応

## 5. パフォーマンス
- 画像の最適化
- コード分割の活用
- 不要なレンダリングの防止
- バンドルサイズの最適化

## 6. テスト
- 1関数に1テストケースは原則書くこと
- 要素を取得する際に、Tailwindクラスを使用して取得しないこと
- コンポーネントのテストは可能な限り実装
- E2Eテストは重要なユーザーフローに対して実装

## 7. デプロイ
- 本番環境へのデプロイは承認プロセスを経る
- デプロイ前にテストを実行
- ロールバック手順を用意

## 8. ドキュメント
- READMEの更新を忘れない
- API仕様書の更新
- 重要な変更はCHANGELOGに記載
- コメントは必要に応じて追加
