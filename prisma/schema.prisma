generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  userProjects          UserProject[]
}

model Project {
  id             String           @id @default(cuid())
  name           String
  startDate      DateTime
  endDate        DateTime?
  userProjects   UserProject[]
}

model UserProject {
  id              String           @id @default(cuid())
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  role            String?
  workTimeReports WorkTimeReport[]

  @@unique([userId, projectId])
}

model WorkTimeReport {
  id            String       @id @default(cuid())
  startDate     DateTime
  endDate       DateTime
  userProject   UserProject  @relation(fields: [userProjectId], references: [id])
  userProjectId String
  isClosed      Boolean      @default(false)
  workTimes     WorkTime[]
}

model WorkTime {
  id               String         @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  workTimeReport   WorkTimeReport @relation(fields: [workTimeReportId], references: [id], onDelete: Cascade)
  workTimeReportId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
