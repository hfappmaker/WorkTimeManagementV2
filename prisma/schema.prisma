generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum WorkReportStatus {
  DRAFT // 作成中
  COMPLETED // 作成完了
  APPROVED // 承認済み
  REJECTED // 却下
  REQUEST_REVISION // 修正依頼
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

// ADMINは契約の作成、支払いの作成、Userの割り当てとUSERで出来ることが全て可能
// USERは契約の閲覧、WorkReportの作成が可能
model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  contracts             Contract[]
  auditLogs             AuditLog[]
}

model Contract {
  id                   String               @id @default(cuid())
  name                 String
  startDate            DateTime
  endDate              DateTime?
  userId               String
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  workReports          WorkReport[]
  unitPrice            Decimal?
  settlementMin        Decimal?
  settlementMax        Decimal?
  upperRate            Decimal?
  middleRate           Decimal?
  closingDay           Int?                // 締め日(1～31)
}

model WorkReport {
  id            String           @id @default(cuid())
  year          Int
  month         Int
  contract      Contract         @relation(fields: [contractId], references: [id])
  contractId    String           
  memo          String?
  attendances   Attendance[]
  status        WorkReportStatus @default(DRAFT)
}

model Attendance {
  id            String     @id @default(cuid())
  date          DateTime
  startTime     DateTime?  @db.Time    // 時刻のみ（例：HH:mm:ss）, 入力がない場合は null
  endTime       DateTime?  @db.Time    // 時刻のみ（例：HH:mm:ss）, 入力がない場合は null
  breakDuration Int        @default(0) // 休憩時間（分）
  memo          String?
  workReport    WorkReport @relation(fields: [workReportId], references: [id], onDelete: Cascade)
  workReportId  String
  @@unique([date, workReportId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AuditLog {
  id            String      @id @default(cuid())
  tableName     String // 変更対象のテーブル名（例："User", "Contract", 等）
  recordId      String // 対象レコードのID
  action        AuditAction // 操作の種別
  // 変更内容の詳細を JSON 形式で格納（必要に応じて）
  changedFields Json?
  createdAt     DateTime    @default(now())
  // 操作を行ったユーザー（任意）
  userId        String?
  user          User?       @relation(fields: [userId], references: [id])
}
